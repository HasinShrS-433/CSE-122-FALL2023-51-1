Sure, I can help you with a C++ code to solve this problem. You can follow this approach to find the longest subarray with exactly K almost prime factors and no perfect prime factor:

```cpp
#include <bits/stdc++.h>
using namespace std;

bool isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return false;
    }
    return true;
}

int countPrimeFactors(int n) {
    int count = 0;
    for (int i = 2; i <= n; i++) {
        if (isPrime(i) && n % i == 0) {
            while (n % i == 0) {
                n /= i;
                count++;
            }
        }
    }
    return count;
}

int longestSubarray(vector<int>& A, int K) {
    int n = A.size();
    int left = 0, ans = 0, almostPrimeCount = 0;

    for (int right = 0; right < n; right++) {
        if (countPrimeFactors(A[right]) == K) {
            almostPrimeCount++;
        } else if (isPrime(A[right])) {
            almostPrimeCount = 0;
        }

        while (almostPrimeCount > K) {
            if (countPrimeFactors(A[left]) == K) {
                almostPrimeCount--;
            }
            left++;
        }

        ans = max(ans, right - left + 1);
    }

    return ans;
}

int main() {
    int N, K;
    cin >> N >> K;
    vector<int> A(N);

    for (int i = 0; i < N; i++) {
        cin >> A[i];
    }

    int result = longestSubarray(A, K);
    cout << result << endl;
    return 0;
}
```

This code first defines a function to check if a number is prime, another function to count prime factors, and finally, the `longestSubarray` function to find the longest subarray that meets your criteria. Make sure to include the necessary headers and adjust the input/output as needed.
